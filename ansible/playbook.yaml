---
- name: Install Postgres to servers
  vars_files:
    - vars.yml
  hosts: db, db_repl
  become: yes

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes

    - name: Update packages and install dependencies
      apt:
        update_cache: yes
        name:
          - python3
          - python3-pip
          - libpq-dev
          - python3-dev
        state: present

    - name: Install psycopg2
      pip:
        name: psycopg2
        state: present

    - name: Install PostgreSQL and contrib packages
      apt:
        name:
          - postgresql
          - postgresql-contrib
        state: present

    - name: restart postgres
      command: systemctl reload postgresql


- name: Configure primary db
  vars_files:
    - vars.yml
  hosts: db
  become: yes
  tasks:
  - name: Override config
    copy:
      src: ../db/postgresql.conf
      dest: /etc/postgresql/13/main/postgresql.conf

  - name: Ensure PostgreSQL archive directory exists
    file:
      path: /var/lib/postgresql/data/archive
      state: directory
      owner: postgres
      group: postgres
      mode: '0700'

  - name: Restart PostgreSQL
    become: true
    service:
      name: postgresql
      state: restarted

  - name: Create db user
    postgresql_user:
      name: "{{ DB_USER }}"
      password: "{{ DB_PASSWORD }}"
    become_user: postgres

  - name: Create replica user
    postgresql_user:
      name: "{{ DB_REPL_USER }}"
      password: "{{ DB_REPL_PASSWORD }}"
      role_attr_flags: "REPLICATION"
    become_user: postgres

  - name: Add sql file
    copy:
      src: ../db/init.sql
      dest: init.sql

  - name: Create db
    community.postgresql.postgresql_db:
      name: "{{ DB_DATABASE }}"
    become_user: postgres

  - name: Run query from SQL script
    community.postgresql.postgresql_script:
      db: "{{ DB_DATABASE }}"
      path: init.sql
    become_user: postgres

  - name: Fetch list of tables in schema public
    community.postgresql.postgresql_query:
      db: "{{ DB_DATABASE }}"
      query: "SELECT tablename FROM pg_tables WHERE schemaname = 'public';"
    register: table_list
    become_user: postgres

  - name: Grant SELECT, INSERT, UPDATE, DELETE on all tables in schema public to the specified role
    community.postgresql.postgresql_privs:
      db: "{{ DB_DATABASE }}"
      privs: "SELECT,INSERT,UPDATE,DELETE"
      type: table
      objs: "{{ item.tablename }}"
      roles: "{{ DB_USER }}"
      state: present
    loop: "{{ table_list.query_result }}"
    become_user: postgres

  - name: add host to pg_hba
    community.postgresql.postgresql_pg_hba:
      dest: /etc/postgresql/13/main/pg_hba.conf
      contype: host
      users: "{{ DB_REPL_USER }}"
      source: 0.0.0.0/0
      databases: replication
      method: scram-sha-256
      create: true

  - name: add host to pg_hba
    community.postgresql.postgresql_pg_hba:
      dest: /etc/postgresql/13/main/pg_hba.conf
      contype: host
      users: "{{ DB_USER }}"
      source: 0.0.0.0/0
      databases: "{{ DB_DATABASE }}"
      method: scram-sha-256
      create: true


  - name: add local
    community.postgresql.postgresql_pg_hba:
      dest: /etc/postgresql/13/main/pg_hba.conf
      contype: local
      users: all
      source: 0.0.0.0/0
      databases: all
      method: trust
      create: true


- name: Configure replica db
  vars_files:
    - vars.yml
  hosts: db_repl
  become: yes
  tasks:
  - name: Set listen_addresses.
    lineinfile: dest=/etc/postgresql/13/main/postgresql.conf
      regexp="listen_addresses =" line="listen_addresses = '*'" state=present

  - name: Restart PostgreSQL
    become: true
    service:
      name: postgresql
      state: restarted

  - name: Delete dir
    command: rm -rf /var/lib/postgresql/data

  - name: Check replica
    community.postgresql.postgresql_query:
      db: "{{ DB_DATABASE }}"
      query: "\\l"
    register: psql_result
    become_user: postgres

  - name: debug
    debug:
      msg: "{{ psql_result }}"

- name: Deploy telegram bot
  vars_files:
    - vars.yml
  hosts: tg_bot
  become: yes
  tasks:
    - name: Install git and python3-venv
      apt:
        update_cache: yes
        name:
          - git
          - python3-virtualenv
          - libpq-dev
          - python3-dev
        state: present

    - name: Pull repo from GitHub
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_directory }}"
        version: "first_branch"
        update: yes

    - name: Copy env file
      copy:
        src: ../.env
        dest: "{{ app_directory }}"

    - name: Debug app_directory variable
      debug:
        msg: "App directory is: {{ app_directory }}"

    - name: List contents of app_directory
      command: "ls -la {{ app_directory }}"
      register: repo_contents

    - name: Debug repo contents
      debug:
        msg: "{{ repo_contents.stdout_lines }}"

    - name: Create a virtual environment
      command: python3 -m venv {{ app_directory }}/venv
      args:
        creates: "{{ app_directory }}/venv"

    - name: Install dependencies
      pip:
        requirements: "{{ app_directory }}/app/requirements.txt"
        virtualenv: "{{ app_directory }}/venv"
        state: present

    - name: Run the Telegram bot
      command: "{{ app_directory }}/venv/bin/python {{ app_directory }}/app/bot.py"
      args:
        chdir: "{{ app_directory }}/app"
      async: 5
      poll: 0
